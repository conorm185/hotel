Hotels----------------------------------------------------------------------
hotelID		int(20)			NOT NULL		PK	AI
name		varchar(255)		NOT NULL			
rating		decimal(10,2)		NOT NULL		
state		varchar(255)		NOT NULL			
city		varchar(255)		NOT NULL			
address		varchar(255)		NOT NULL
zip		varchar(255)		NOT NULL			

Rooms-----------------------------------------------------------------------
roomID		int(20)			NOT NULL		PK
hotelID		int(20)			NOT NULL		FK
typeID		int(20)			NOT NULL		FK
num		int(20)			NOT NULL
interiorpath
exteriorpath			

RoomTypes------------------------------------------------------------------
typeID		int(20)			NOT NULL		PK
rate		decimal(10,2)		NOT NULL
*name		varchar(255)		NOT NULL
*foldout		
desc		varchar(255)		NOT NULL			

Reservations----------------------------------------------------------------
resID		int(20)			NOT NULL		PK	AI
roomID		int(20)			NOT NULL		FK
customerID	int(20)			NOT NULL		FK
*hotelID	int(20)			NOT NULL		FK
start		date()			NOT NULL		
end		date()			NOT NULL		
*length		int(10)			NOT NULL		

OLD RESERVATIONS------------------------------------------------------------

Customers-------------------------------------------------------------------
customerID	int(20)			NOT NULL		PK	AI	
name		varchar(255)		NOT NULL			
address		varchar(255)		NOT NULL			
email		varchar(255)		NOT NULL		UNIQUE	
psw		varchar(255)		NOT NULL			
salt		varchar(255)		NOT NULL			

Reviews---------------------------------------------------------------------
reviewID	int(20)			NOT NULL		PK	AI	
customerID	int(20)			NOT NULL			
hotelID		int(20)			NOT NULL			
date		date()			NOT NULL		UNIQUE	
rating		int(2)			NOT NULL			
comment		varchar(255)		NOT NULL			



////////////////////////////common queries/////////////////////////////////////

MAKE A RESERVATION-----------------------------------------------------------
choose at $location
choose a $start and $end date
query all rooms at $location with no reservations between the start and end

SELECT	*
FROM ROOMS
WHERE hotelID=$location
AND
	(sub query: rid where there are no existing reservations)

then

INSERT INTO RESERVATIONS(roomID, customerID, hotelID, start, end, length)
VALUES(roomID, customerID, hotelID, start, end, length)

FIND THE COST OF A RESERVATION------------------------------------------------

SELECT Rooms.rate, Reservations.length
FROM Reservations
INNER JOIN Rooms ON Reservations.roomID = Room.roomID;

FIND CUSTOMER ORDER HISTORY---------------------------------------------------

SELECT	*
FROM RESERVATIONS
WHERE customerID=$_SESSION['cid']

CREATE NEW CUSTOMER ACCOUNT---------------------------------------------------

INSERT INTO Customers()
VALUES()	

CREATE NEW REVIEW ------------------------------------------------------------

INSERT INTO Reviews()
VALUES()



////////////////////////////////////////questions////////////////////////////////////////
 
1.	migrating 'old' reservations to a seperate table

2.	how to use DATEDIFF with two fields from the same table

3.	implementing restrictions and cascades

4.	calculate hotel rating from existing reviews






////////////////////////////////////////todo////////////////////////////////////////

order of creating DB data

create 50 hotels, one in the capital of each state
create 8 room types (double, queen, king, pair, pent, honeymoon)
use 50 customers from sample table
create 150 reviews. 3 for each location

create 20 rooms for each hotel
create a bunch of existing reservations


////////////////////////////////////////interesting queries////////////////////////////////////////






Sum of all reservation days at a given location
SELECT SUM(length) 
FROM `reservations`,rooms 
WHERE reservations.roomID=rooms.roomID AND rooms.hotelID=1

number of rooms at a given location
SELECT count(roomID) 
FROM `rooms` 
WHERE rooms.hotelID=1

number of days since 2009
SELECT DATEDIFF(CURDATE(), "2009-01-01");

total number of roomdays at a given location
SELECT ((SELECT DATEDIFF(CURDATE(), "2009-01-01"))*(SELECT count(roomID) 
FROM `rooms` 
WHERE rooms.hotelID=1))

room occupancy rate at a given location
(SELECT ((100*(SELECT SUM(length) 
		FROM `reservations`,rooms 
		WHERE reservations.roomID=rooms.roomID AND rooms.hotelID=1)/
			((SELECT DATEDIFF(CURDATE(), "2009-01-01"))
		*
		(SELECT count(roomID) 
		FROM `rooms` 
		WHERE rooms.hotelID=1)))) AS rate)



1. find all rooms available at a given location that don't conflict with  existing reservations
implemented in RoomsDB.class.php

SELECT * 
FROM rooms 
INNER JOIN roomType ON roomType.typeID=Rooms.typeID  
WHERE hotelID=?
AND Rooms.typeID=?
AND roomID NOT IN(SELECT roomID 
			FROM reservations 
			WHERE startDate BETWEEN $checkin AND $checkout 
				OR $checkin BETWEEN startDate AND endDate )


2. find the occupancy_rate of all hotels

SELECT *,(SELECT ((100*(SELECT SUM(length) 
		FROM `reservations`,rooms 
		WHERE reservations.roomID=rooms.roomID AND rooms.hotelID=1)/
			((SELECT DATEDIFF(CURDATE(), "2009-01-01"))
		*
		(SELECT count(roomID) 
		FROM `rooms` 
		WHERE rooms.hotelID=hotels.HotelID)))))AS occupancy_rate
FROM `hotels`


BONUS PROCEDURE: generates 200k reservations

drop procedure if exists generateReservations
DELIMITER //  
CREATE PROCEDURE generateReservations()   
BEGIN
DECLARE i INT DEFAULT 1; 
DECLARE randomDay date DEFAULT "2009-01-01";
DECLARE randomLength int DEFAULT 1;
DECLARE endDay date DEFAULT "2009-01-02";
DECLARE randomRoomID int DEFAULT 1;
DECLARE randomCustomerID int DEFAULT 1;
WHILE (i <= 200000) DO
	set @randomDay = DATE_ADD("2009-01-01", INTERVAL FLOOR(RAND()*(3740-1+1)+1) DAY);
	set @randomLength = FLOOR(RAND()*(14-1+1)+1);
	set @endDay = DATE_ADD(@randomDay, INTERVAL @randomLength DAY);
	set @randomRoomID = FLOOR(RAND()*(4883-1+1)+1);
    set @randomCustomerID = FLOOR(RAND()*(5000-1+1)+1);
    
    IF (@randomCustomerID > 51)
    THEN
    	set @randomCustomerID = 1;
    END IF;
    
    IF  (EXISTS(SELECT * FROM (    	SELECT *
    					FROM reservations
					    WHERE roomID = @randomRoomID) AS t
                WHERE  t.startDate BETWEEN @randomDay AND @endDay OR
		@randomDay BETWEEN t.startDate AND t.endDate)) THEN
	  set @randomRoomID = FLOOR(RAND()*(4883-1+1)+1);
	ELSE
	  INSERT INTO `reservations`(`roomID`, `customerID`,`startDate`, `endDate`, `length`)
	 		VALUES (@randomRoomID,@randomCustomerID,@randomDay,@endDay,@randomLength);
	END IF;          
    SET i = i+1;
END WHILE;
END;
//
CALL generateReservations();











